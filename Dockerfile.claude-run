# syntax=docker/dockerfile:1-labs

FROM node:20-alpine3.22 AS node_base

FROM node_base AS node_deps
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci --legacy-peer-deps

FROM node_base AS node_builder
WORKDIR /app
COPY --from=node_deps /app/node_modules ./node_modules
# Copy only necessary files for Next.js build
COPY package.json package-lock.json next.config.ts tsconfig.json tailwind.config.js postcss.config.mjs ./
COPY src/ ./src/
COPY public/ ./public/
# Increase Node.js memory limit for build and disable telemetry
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NEXT_TELEMETRY_DISABLED=1
RUN NODE_ENV=production npm run build

FROM python:3.11-slim AS py_deps
WORKDIR /app
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
COPY api/requirements.txt ./api/
RUN pip install --no-cache -r api/requirements.txt

# Pre-download tiktoken encodings to avoid runtime network issues
RUN python -c "import tiktoken; tiktoken.get_encoding('cl100k_base')"

# Use Python 3.11 as final image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install Node.js and npm
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    git \
    ca-certificates \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH="/opt/venv/bin:$PATH"

# Copy Python dependencies
COPY --from=py_deps /opt/venv /opt/venv
COPY api/ ./api/

# Copy Node app
COPY --from=node_builder /app/public ./public
COPY --from=node_builder /app/.next/standalone ./
COPY --from=node_builder /app/.next/static ./.next/static
# Copy package.json for runtime
COPY package.json ./

# Create log directory
RUN mkdir -p /app/api/logs

# Expose the port the app runs on
EXPOSE 8001 3000

# Create a simplified script to run both backend and frontend
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Get the Cloud Run port (default to 3000 if not set)\n\
FRONTEND_PORT=${PORT:-3000}\n\
API_PORT=8001\n\
\n\
echo "Starting DeepWiki services..."\n\
echo "API Port: $API_PORT (fixed)"\n\
echo "Frontend Port: $FRONTEND_PORT"\n\
\n\
# Create a health check endpoint file for the frontend port\n\
mkdir -p /tmp\n\
echo "OK" > /tmp/health\n\
\n\
# Start the API server in the background on port 8001\n\
cd /app && API_PORT=$API_PORT python -m api.main &\n\
API_PID=$!\n\
\n\
# Wait a moment for API to start\n\
sleep 5\n\
\n\
# Start the frontend with Cloud Run PORT\n\
echo "Starting frontend on port $FRONTEND_PORT"\n\
cd /app && PORT=$FRONTEND_PORT HOSTNAME=0.0.0.0 node server.js &\n\
FRONTEND_PID=$!\n\
\n\
# Simple cleanup function\n\
cleanup() {\n\
  echo "Shutting down..."\n\
  kill $API_PID $FRONTEND_PID 2>/dev/null || true\n\
  exit 0\n\
}\n\
\n\
trap cleanup SIGTERM SIGINT\n\
\n\
# Wait for both processes - if either fails, exit\n\
wait -n $API_PID $FRONTEND_PID\n\
exit_code=$?\n\
echo "One of the services exited with code $exit_code"\n\
cleanup\n\
' > /app/start.sh && chmod +x /app/start.sh

# Set environment variables
ENV NODE_ENV=production
ENV SERVER_BASE_URL=http://localhost:8001

# Health check - check both API and frontend
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8001/health && curl -f http://localhost:${PORT:-3000} || exit 1

# Command to run the application
CMD ["/app/start.sh"] 