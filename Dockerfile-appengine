# syntax=docker/dockerfile:1-labs

# Single-stage build using Python 3.12 as base
FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Install Node.js and npm, plus other dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    git \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create and activate Python virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
COPY api/requirements.txt ./api/
RUN pip install --no-cache -r api/requirements.txt

# Copy API code
COPY api/ ./api/

# Copy adalflow credentials
COPY .adalflow /root/.adalflow

# Install Node.js dependencies and build Next.js app
COPY package.json package-lock.json ./
RUN npm ci --legacy-peer-deps

# Copy Next.js source files
COPY next.config.ts tsconfig.json tailwind.config.js postcss.config.mjs ./
COPY src/ ./src/
COPY public/ ./public/

# Build Next.js app with increased memory limit
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NEXT_TELEMETRY_DISABLED=1
RUN NODE_ENV=production npm run build

# Copy built Next.js app (source is from within the image after build)
RUN cp -r .next/standalone/* ./


# Create a script to run both backend and frontend
RUN echo '#!/bin/bash\n\
    # Load environment variables from .env file if it exists\n\
    if [ -f .env ]; then\n\
    export $(grep -v "^#" .env | xargs -r)\n\
    fi\n\
    \n\
    # Check for required environment variables\n\
    if [ -z "$OPENAI_API_KEY" ] || [ -z "$GOOGLE_API_KEY" ]; then\n\
    echo "Warning: OPENAI_API_KEY and/or GOOGLE_API_KEY environment variables are not set."\n\
    echo "These are required for DeepWiki to function properly."\n\
    echo "You can provide them via a mounted .env file or as environment variables when running the container."\n\
    fi\n\
    \n\
    # Start the API server in the background with the configured port\n\
    python -m api.main --port 8001 &\n\
    PORT=${PORT} HOSTNAME=0.0.0.0 node server.js &\n\
    wait -n\n\
    exit $?' > /app/start.sh && chmod +x /app/start.sh

# Set environment variables
ENV NODE_ENV=production
ENV SERVER_BASE_URL=http://localhost:8001

# Create empty .env file (will be overridden if one exists at runtime)
RUN touch .env

# Command to run the application
CMD ["/app/start.sh"]
